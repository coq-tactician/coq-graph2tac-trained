starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 1036064408)
( synchronized = 1036064408 )
Model Loaded
0
(synchronize = 267544708)
(synchronized = 267544708)
Model Loaded
0
(synchronize = 11042449)
(synchronized = 11042449)
Model Loaded
0
(synchronize = 751935392)
(synchronized = 751935392)
Model Loaded
0
(synchronize = 483652920)
(synchronized = 483652920)
Model Loaded
0
(synchronize = 1019990238)
( synchronized = 1019990238 )
Model Loaded
0
(synchronize = 569593461)
(synchronized = 569593461)
Model Loaded
0
(synchronize = 366717792)
(synchronized = 366717792)
Model Loaded
0
(synchronize = 878784308)
(synchronized = 878784308)
Model Loaded
0
(synchronize = 571447494)
(synchronized = 571447494)
Model Loaded
0
(synchronize = 113172021)
(synchronized = 113172021)
Model Loaded
0
(synchronize = 31241417)
(synchronized = 31241417)
Model Loaded
0
(synchronize = 279420939)
(synchronized = 279420939)
Model Loaded
0
(synchronize = 1034747477)
( synchronized = 1034747477 )
Model Loaded
0
(synchronize = 981318590)
(synchronized = 981318590)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 344468619)
(synchronized = 344468619)
Model Loaded
0
(synchronize = 1044130817)
( synchronized = 1044130817 )
Model Loaded
0
(synchronize = 165721333)
(synchronized = 165721333)
Model Loaded
0
(synchronize = 586701588)
(synchronized = 586701588)
Model Loaded
0
(synchronize = 124079497)
(synchronized = 124079497)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 37286493)
(synchronized = 37286493)
Model Loaded
0
(synchronize = 824589428)
(synchronized = 824589428)
Model Loaded
0
(synchronize = 93222268)
(synchronized = 93222268)
Model Loaded
0
(synchronize = 113604927)
(synchronized = 113604927)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 809087090)
(synchronized = 809087090)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 885710058)
(synchronized = 885710058)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 395863621)
(synchronized = 395863621)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 747.7232882976532 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 572704896)
(synchronized = 572704896)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 793379417)
(synchronized = 793379417)
(synchronize = 1048630804)
( synchronized = 1048630804 )
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 397034560)
(synchronized = 397034560)
(synchronize = 292463041)
(synchronized = 292463041)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 346526713)
(synchronized = 346526713)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 741.080563545227 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 473131595)
(synchronized = 473131595)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 752161171)
(synchronized = 752161171)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 738.3194401264191 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 518844572)
(synchronized = 518844572)
Model Loaded
0
(synchronize = 212281137)
(synchronized = 212281137)
(synchronize = 991722699)
(synchronized = 991722699)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 405667616)
(synchronized = 405667616)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 733.8183584213257 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 291203652)
(synchronized = 291203652)
Model Loaded
0
(synchronize = 583311276)
(synchronized = 583311276)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 746.8893091678619 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 228025491)
(synchronized = 228025491)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 700468663)
(synchronized = 700468663)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 743.6753723621368 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 646415438)
(synchronized = 646415438)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 549830920)
(synchronized = 549830920)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 742.1119346618652 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 206821256)
(synchronized = 206821256)
Model Loaded
0
(synchronize = 919814037)
(synchronized = 919814037)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 738.7424073219299 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 524158052)
(synchronized = 524158052)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 187387144)
(synchronized = 187387144)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 738.8347358703613 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 792331308)
(synchronized = 792331308)
Model Loaded
0
(synchronize = 709674040)
(synchronized = 709674040)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 743.8839552402496 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 520471662)
(synchronized = 520471662)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 11553844)
(synchronized = 11553844)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 742.288964509964 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 740020974)
(synchronized = 740020974)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 71183946)
(synchronized = 71183946)
(synchronize = 302837248)
(synchronized = 302837248)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 519850104)
(synchronized = 519850104)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 704.4380843639374 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 174703084)
(synchronized = 174703084)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 488190663)
(synchronized = 488190663)
(synchronize = 972466707)
(synchronized = 972466707)
Model Loaded
0
(synchronize = 1040184953)
( synchronized = 1040184953 )
(synchronize = 469826582)
(synchronized = 469826582)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 577002146)
(synchronized = 577002146)
(synchronize = 761385788)
(synchronized = 761385788)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 375840023)
(synchronized = 375840023)
(synchronize = 1029379803)
( synchronized = 1029379803 )
Model Loaded
0
(synchronize = 359588815)
(synchronized = 359588815)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 652.7861819267273 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 273786980)
(synchronized = 273786980)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 529143940)
(synchronized = 529143940)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 653.3318681716919 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 944293789)
(synchronized = 944293789)
Model Loaded
0
(synchronize = 333229051)
(synchronized = 333229051)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 649.3361430168152 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 461476831)
(synchronized = 461476831)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 271884013)
(synchronized = 271884013)
(synchronize = 353958370)
(synchronized = 353958370)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 578907413)
(synchronized = 578907413)
---------------- New prediction context -----------------
(initialized = void)

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
[": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy", ": Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ", ': IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx', ': IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption', ': IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?']

SAMPLE
 OUTPUT
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy 
1
 : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
 OUTPUT : Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ 
1
 : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
 OUTPUT : IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx 
1
 : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
 OUTPUT : IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption 
1
 : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
 OUTPUT : IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros? 
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R' y x) OUTPUT easy
: Type, R : (Relation_Definitions.relation A), R' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R'), x : A, WF' : (forall y : A, R y x -> Acc R' y), y : A, Ryx : (R' y x) |- (R y x) OUTPUT apply EQ
: IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx
: IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \/ B), HC : C, H : A |- A OUTPUT assumption
: IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?
Prediction takes 607.4606854915619 seconds
RESPONSE
( textPrediction = [
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R\' y x) OUTPUT easy",
      confidence = 0.5 ),
    ( tacticText = ": Type, R : (Relation_Definitions.relation A), R\' : (Relation_Definitions.relation A), EQ : (relation_equivalence R R\'), x : A, WF\' : (forall y : A, R y x -> Acc R\' y), y : A, Ryx : (R\' y x) |- (R y x) OUTPUT apply EQ",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Type, P : (A -> Prop), InhA : A, Hx : (exists x : A, P x) |- (exists x : A, P x) OUTPUT exact Hx",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises, A : Prop, B : Prop, C : Prop, HCAB : (C -> A \\/ B), HC : C, H : A |- A OUTPUT assumption",
      confidence = 0.5 ),
    ( tacticText = ": IndependenceOfGeneralPremises |- DrinkerParadox OUTPUT intros?",
      confidence = 0.5 ) ] )
(synchronize = 997979251)
(synchronized = 997979251)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 964552365)
(synchronized = 964552365)
(synchronize = 1027653944)
( synchronized = 1027653944 )
(synchronize = 492737944)
(synchronized = 492737944)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 395813221)
(synchronized = 395813221)
(synchronize = 699342276)
(synchronized = 699342276)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 339369280)
(synchronized = 339369280)
(synchronize = 498484845)
(synchronized = 498484845)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 90168973)
(synchronized = 90168973)
(synchronize = 198254530)
(synchronized = 198254530)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 441612387)
(synchronized = 441612387)
(synchronize = 771520317)
(synchronized = 771520317)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 294827437)
(synchronized = 294827437)
(synchronize = 1057901993)
( synchronized = 1057901993 )
(synchronize = 765260739)
(synchronized = 765260739)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 724970128)
(synchronized = 724970128)
(synchronize = 728362516)
(synchronized = 728362516)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 275859573)
(synchronized = 275859573)
(synchronize = 819240814)
(synchronized = 819240814)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 598331105)
(synchronized = 598331105)
(synchronize = 360370383)
(synchronized = 360370383)
(synchronize = 271308472)
(synchronized = 271308472)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 323516368)
(synchronized = 323516368)
(synchronize = 1068349326)
( synchronized = 1068349326 )
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 860032991)
(synchronized = 860032991)
(synchronize = 848837715)
(synchronized = 848837715)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 375262131)
(synchronized = 375262131)
(synchronize = 922241936)
(synchronized = 922241936)
(synchronize = 948463385)
(synchronized = 948463385)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 593201547)
(synchronized = 593201547)
(synchronize = 771127501)
(synchronized = 771127501)
Model Loaded
0
(synchronize = 959514106)
(synchronized = 959514106)
(synchronize = 1025051468)
( synchronized = 1025051468 )
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 32575386)
(synchronized = 32575386)
(synchronize = 605845727)
(synchronized = 605845727)
(synchronize = 428570840)
(synchronized = 428570840)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 220544206)
(synchronized = 220544206)
(synchronize = 72800982)
(synchronized = 72800982)
(synchronize = 735083183)
(synchronized = 735083183)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 699956101)
(synchronized = 699956101)
(synchronize = 1067115831)
( synchronized = 1067115831 )
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 1006357690)
( synchronized = 1006357690 )
(synchronize = 822062608)
(synchronized = 822062608)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 71788534)
(synchronized = 71788534)
(synchronize = 1010382290)
( synchronized = 1010382290 )
(synchronize = 797276827)
(synchronized = 797276827)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 933675662)
(synchronized = 933675662)
(synchronize = 909302636)
(synchronized = 909302636)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 29697498)
(synchronized = 29697498)
(synchronize = 1059625746)
( synchronized = 1059625746 )
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 1051787764)
( synchronized = 1051787764 )
(synchronize = 436991662)
(synchronized = 436991662)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 242317856)
(synchronized = 242317856)
(synchronize = 578253806)
(synchronized = 578253806)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 890952757)
(synchronized = 890952757)
(synchronize = 689405364)
(synchronized = 689405364)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 1029928600)
( synchronized = 1029928600 )
---------------- New prediction context -----------------
(initialized = void)
(synchronize = 472209833)
(synchronized = 472209833)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 256359457)
(synchronized = 256359457)
(synchronize = 636165100)
(synchronized = 636165100)
Model Loaded
0
(synchronize = 706358800)
(synchronized = 706358800)
(synchronize = 578510774)
(synchronized = 578510774)
Model Loaded
0
(synchronize = 18770510)
(synchronized = 18770510)
(synchronize = 994792618)
(synchronized = 994792618)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 903734049)
(synchronized = 903734049)
(synchronize = 505532722)
(synchronized = 505532722)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 542680481)
(synchronized = 542680481)
---------------- New prediction context -----------------
(initialized = void)
(synchronize = 825368056)
(synchronized = 825368056)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 258153596)
(synchronized = 258153596)
(synchronize = 170637322)
(synchronized = 170637322)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 695223148)
(synchronized = 695223148)
(synchronize = 734517944)
(synchronized = 734517944)
(synchronize = 793157595)
(synchronized = 793157595)
(synchronize = 52413096)
(synchronized = 52413096)
(synchronize = 46787239)
(synchronized = 46787239)
(synchronize = 556283928)
(synchronized = 556283928)
(synchronize = 320623631)
(synchronized = 320623631)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 475216899)
(synchronized = 475216899)
(synchronize = 455343886)
(synchronized = 455343886)
(synchronize = 839750538)
(synchronized = 839750538)
(synchronize = 268399873)
(synchronized = 268399873)
Model Loaded
0
(synchronize = 977329241)
(synchronized = 977329241)
(synchronize = 675276322)
(synchronized = 675276322)
starting proving server with connection through their stdin
using textmode optiongraph
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 1050202322)
( synchronized = 1050202322 )
(synchronize = 120563793)
(synchronized = 120563793)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 254032080)
(synchronized = 254032080)
(synchronize = 714847001)
(synchronized = 714847001)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 247717643)
(synchronized = 247717643)
(synchronize = 787791989)
(synchronized = 787791989)
starting proving server with connection through their stdin
using textmode optiongraph
Model Loaded
0
(synchronize = 673238550)
(synchronized = 673238550)
(synchronize = 682711892)
(synchronized = 682711892)
(synchronize = 1035151518)
( synchronized = 1035151518 )
starting proving server with connection through their stdin
using textmode optiongraph
